{"nbformat":4,"nbformat_minor":0,"metadata":{"anaconda-cloud":{},"kernelspec":{"display_name":"Python 3.6 (tensorflow)","language":"python","name":"tensorflow"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.5"},"colab":{"name":"ResNet-v2 with Graph","provenance":[{"file_id":"https://github.com/jeffheaton/t81_558_deep_learning/blob/master/t81_558_class_06_3_resnet.ipynb","timestamp":1623235796274}],"collapsed_sections":["zelI6ki5hKmy"],"machine_shape":"hm"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"YDTXd8-Lmp8Q"},"source":["# T81-558: Applications of Deep Neural Networks\n","**Module 6: Convolutional Neural Networks (CNN) for Computer Vision**\n","* Instructor: [Jeff Heaton](https://sites.wustl.edu/jeffheaton/), McKelvey School of Engineering, [Washington University in St. Louis](https://engineering.wustl.edu/Programs/Pages/default.aspx)\n","* For more information visit the [class website](https://sites.wustl.edu/jeffheaton/t81-558/)."]},{"cell_type":"markdown","metadata":{"id":"ncNrAEpzmp8S"},"source":["# Module 6 Material\n","\n","* Part 6.1: Image Processing in Python [[Video]](https://www.youtube.com/watch?v=4Bh3gqHkIgc&list=PLjy4p-07OYzulelvJ5KVaT2pDlxivl_BN) [[Notebook]](t81_558_class_06_1_python_images.ipynb)\n","* Part 6.2: Keras Neural Networks for Digits and Fashion MNIST [[Video]](https://www.youtube.com/watch?v=-SA8BmGvWYE&list=PLjy4p-07OYzulelvJ5KVaT2pDlxivl_BN) [[Notebook]](t81_558_class_06_2_cnn.ipynb)\n","* **Part 6.3: Implementing a ResNet in Keras** [[Video]](https://www.youtube.com/watch?v=qMFKsMeE6fM&list=PLjy4p-07OYzulelvJ5KVaT2pDlxivl_BN) [[Notebook]](t81_558_class_06_3_resnet.ipynb)\n","* Part 6.4: Using Your Own Images with Keras [[Video]](https://www.youtube.com/watch?v=VcFja1fUNSk&list=PLjy4p-07OYzulelvJ5KVaT2pDlxivl_BN) [[Notebook]](t81_558_class_06_4_keras_images.ipynb)\n","* Part 6.5: Recognizing Multiple Images with YOLO Darknet [[Video]](https://www.youtube.com/watch?v=oQcAKvBFli8&list=PLjy4p-07OYzulelvJ5KVaT2pDlxivl_BN) [[Notebook]](t81_558_class_06_5_yolo.ipynb)"]},{"cell_type":"markdown","metadata":{"id":"XESWfLvlZGHp"},"source":["# Google CoLab Instructions\n","\n","The following code ensures that Google CoLab is running the correct version of TensorFlow."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fU9UhAxTmp8S","executionInfo":{"status":"ok","timestamp":1623424638909,"user_tz":-420,"elapsed":8,"user":{"displayName":"Hiruka Shiro","photoUrl":"","userId":"01239836994690731741"}},"outputId":"f25f9ad2-0eb1-434a-ca34-7a5469bbff1f"},"source":["# Detect Colab if present\n","try:\n","    from google.colab import drive\n","    COLAB = True\n","    print(\"Note: using Google CoLab\")\n","    %tensorflow_version 2.x\n","except:\n","    print(\"Note: not using Google CoLab\")\n","    COLAB = False\n","\n","# Nicely formatted time string\n","def hms_string(sec_elapsed):\n","    h = int(sec_elapsed / (60 * 60))\n","    m = int((sec_elapsed % (60 * 60)) / 60)\n","    s = sec_elapsed % 60\n","    return f\"{h}:{m:>02}:{s:>05.2f}\""],"execution_count":2,"outputs":[{"output_type":"stream","text":["Note: using Google CoLab\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WlIBycs_KlWj","executionInfo":{"status":"ok","timestamp":1623424640727,"user_tz":-420,"elapsed":597,"user":{"displayName":"Hiruka Shiro","photoUrl":"","userId":"01239836994690731741"}},"outputId":"6da52c3e-10ac-41a8-ee1c-cc76f6678be2"},"source":["gpu_info = !nvidia-smi\n","gpu_info = '\\n'.join(gpu_info)\n","if gpu_info.find('failed') >= 0:\n","  print('Select the Runtime > \"Change runtime type\" menu to enable a GPU accelerator, ')\n","  print('and then re-execute this cell.')\n","else:\n","  print(gpu_info)"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Fri Jun 11 15:17:20 2021       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 465.27       Driver Version: 460.32.03    CUDA Version: 11.2     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  Tesla P100-PCIE...  Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   45C    P0    29W / 250W |      0MiB / 16280MiB |      0%      Default |\n","|                               |                      |                  N/A |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","|  No running processes found                                                 |\n","+-----------------------------------------------------------------------------+\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8mDxaI5nKl-2","executionInfo":{"status":"ok","timestamp":1623424641118,"user_tz":-420,"elapsed":4,"user":{"displayName":"Hiruka Shiro","photoUrl":"","userId":"01239836994690731741"}},"outputId":"b3460559-e10e-4053-8e65-2981c63c3304"},"source":["from psutil import virtual_memory\n","ram_gb = virtual_memory().total / 1e9\n","print('Your runtime has {:.1f} gigabytes of available RAM\\n'.format(ram_gb))\n","\n","if ram_gb < 20:\n","  print('To enable a high-RAM runtime, select the Runtime > \"Change runtime type\"')\n","  print('menu, and then select High-RAM in the Runtime shape dropdown. Then, ')\n","  print('re-execute this cell.')\n","else:\n","  print('You are using a high-RAM runtime!')"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Your runtime has 27.3 gigabytes of available RAM\n","\n","You are using a high-RAM runtime!\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Q09yMGGcmp9N"},"source":["# Part 6.3: Implementing a ResNet in Keras\n","\n","Deeper neural networks are more difficult to train. Residual learning was introduced to ease the training of networks that are substantially deeper than those used previously. ResNet explicitly reformulates the layers as learning residual functions with reference to the layer inputs, instead of learning unreferenced functions. On the ImageNet dataset this method was evaluated with residual nets with a depth of up to 152 layers---8x deeper than VGG nets but still having lower complexity. An ensemble of these residual nets achieves 3.57% error on the ImageNet test set. This result won the 1st place on the ILSVRC 2015 classification task. This technique can also be applied to the CIFAR-10 with 100 and 1000 layers. \n","\n","ResNet was introduced in the following paper:\n","\n","* K. He, X. Zhang, S. Ren, and J. Sun. [Deep residual learning for image recognition](https://arxiv.org/abs/1512.03385). arXiv preprint arXiv:1512.03385,2015.\n","\n","What is a residual?\n","\n","* [Residual](https://www.merriam-webster.com/dictionary/residual): an internal aftereffect of experience or activity that influences later behavior\n","\n","To implement a ResNet we need to give Keras the notion of a residual block.  This is essentially two dense layers with a \"skip connection\" (or residual connection).  A residual block is shown in Figure 6.SKIP.\n","\n","\n","**Figure 6.SKIP: Skip Layers**\n","![Skip Layers](https://raw.githubusercontent.com/jeffheaton/t81_558_deep_learning/master/images/skip-layer.png \"Skip Layers\")\n","\n","Residual blocks are typically used with convolutional neural networks (CNNs).  This allows very deep neural networks of CNNs to be created.  Figure 6.RES shows several different ResNets.\n","\n","**Figure 6.RES: ResNets**\n","![ResNets](https://raw.githubusercontent.com/jeffheaton/t81_558_deep_learning/master/images/resnet.png \"ResNets\")\n","\n","\n","### Keras Sequence vs Functional Model API\n","\n","Most of the neural networks create in this course have made use of the Keras sequence object.  You might have noticed that we briefly made use of another type of neural network object for the ResNet, the Model.  These are the [two major means](https://keras.io/getting-started/functional-api-guide/) of constructing a neural network in Keras:\n","\n","* [Sequential](https://keras.io/getting-started/sequential-model-guide/) - Simplified interface to Keras that supports most models where the flow of information is a simple sequence from input to output. \n","* [Keras Functional API](https://keras.io/getting-started/functional-api-guide/) - More complex interface that allows neural networks to be constructed of reused layers, multiple input layers, and supports building your own recurrent connections.\n","\n","It is important to point out that these are not two specific types of neural network.  Rather, they are two means of constructing neural networks in Keras.  Some types of neural network can be implemented in either, such as dense feedforward neural networks (like we used for the Iris and MPG datasets).  However, other types of neural network, like ResNet and GANs can only be used in the Functional Model API.\n","\n","### CIFAR Dataset\n","\n","The [CIFAR-10 and CIFAR-100](https://www.cs.toronto.edu/~kriz/cifar.html) datasets are also frequently used by the neural network research community.  These datasets were originally part of a competition. \n","\n","The CIFAR-10 data set contains low-res images that are divided into 10 classes.  The CIFAR-100 data set contains 100 classes in a hierarchy. \n"]},{"cell_type":"markdown","metadata":{"id":"zelI6ki5hKmy"},"source":["# Testing the CIFAR10"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":408},"id":"vsHA5OBsZ2A3","executionInfo":{"status":"error","timestamp":1623239913921,"user_tz":-420,"elapsed":3392,"user":{"displayName":"Eraraya Ricardo Muten","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggpw7xw-lyk6u6l92QjpI7MlI7qjJuuciCpwrUd=s64","userId":"03770692095188133952"}},"outputId":"2f66f2b2-213d-41a2-e629-6a80cd5a24ea"},"source":["# Load the CIFAR10 data.\n","(x_train, y_train), (x_test, y_test) = cifar10.load_data()\n","print(x_train.shape, x_test.shape)\n","print(y_train.shape, y_test.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Downloading data from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\n"," 15671296/170498071 [=>............................] - ETA: 22s"],"name":"stdout"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-703ed42e57b1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Load the CIFAR10 data.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;34m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mx_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcifar10\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_test\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/datasets/cifar10.py\u001b[0m in \u001b[0;36mload_data\u001b[0;34m()\u001b[0m\n\u001b[1;32m     82\u001b[0m       \u001b[0muntar\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     83\u001b[0m       \u001b[0mfile_hash\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 84\u001b[0;31m       '6d958be074577803d12ecdefd02955f39262c83c16fe9348329d7fe0b5c001ce')\n\u001b[0m\u001b[1;32m     85\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     86\u001b[0m   \u001b[0mnum_train_samples\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m50000\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/utils/data_utils.py\u001b[0m in \u001b[0;36mget_file\u001b[0;34m(fname, origin, untar, md5_hash, file_hash, cache_subdir, hash_algorithm, extract, archive_format, cache_dir)\u001b[0m\n\u001b[1;32m    256\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    257\u001b[0m       \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 258\u001b[0;31m         \u001b[0murlretrieve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0morigin\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdl_progress\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    259\u001b[0m       \u001b[0;32mexcept\u001b[0m \u001b[0murllib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mHTTPError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    260\u001b[0m         \u001b[0;32mraise\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror_msg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0morigin\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36murlretrieve\u001b[0;34m(url, filename, reporthook, data)\u001b[0m\n\u001b[1;32m    274\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    275\u001b[0m             \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 276\u001b[0;31m                 \u001b[0mblock\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    277\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mblock\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    278\u001b[0m                     \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mread\u001b[0;34m(self, amt)\u001b[0m\n\u001b[1;32m    459\u001b[0m             \u001b[0;31m# Amount is given, implement using readinto\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    460\u001b[0m             \u001b[0mb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbytearray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mamt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 461\u001b[0;31m             \u001b[0mn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadinto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    462\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mmemoryview\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtobytes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    463\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mreadinto\u001b[0;34m(self, b)\u001b[0m\n\u001b[1;32m    503\u001b[0m         \u001b[0;31m# connection, and the user is reading more bytes than will be provided\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    504\u001b[0m         \u001b[0;31m# (for example, reading in 1k chunks)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 505\u001b[0;31m         \u001b[0mn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadinto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    506\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mn\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    507\u001b[0m             \u001b[0;31m# Ideally, we would raise IncompleteRead if the content-length\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/socket.py\u001b[0m in \u001b[0;36mreadinto\u001b[0;34m(self, b)\u001b[0m\n\u001b[1;32m    587\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    588\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 589\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_into\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    590\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    591\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_timeout_occurred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/ssl.py\u001b[0m in \u001b[0;36mrecv_into\u001b[0;34m(self, buffer, nbytes, flags)\u001b[0m\n\u001b[1;32m   1069\u001b[0m                   \u001b[0;34m\"non-zero flags not allowed in calls to recv_into() on %s\"\u001b[0m \u001b[0;34m%\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1070\u001b[0m                   self.__class__)\n\u001b[0;32m-> 1071\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnbytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1072\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1073\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_into\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbuffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnbytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflags\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/ssl.py\u001b[0m in \u001b[0;36mread\u001b[0;34m(self, len, buffer)\u001b[0m\n\u001b[1;32m    927\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    928\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mbuffer\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 929\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sslobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    930\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    931\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sslobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","metadata":{"id":"372-21BTmp9P"},"source":["Samples from the loaded CIFAR dataset can be displayed using the following code."]},{"cell_type":"code","metadata":{"id":"ZyJdYNTDmp9P"},"source":["%matplotlib inline\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from six.moves import cPickle \n","\n","ROWS = 10\n","\n","x = x_train.astype(\"uint8\")\n","\n","fig, axes1 = plt.subplots(ROWS,ROWS,figsize=(10,10))\n","for j in range(ROWS):\n","    for k in range(ROWS):\n","        i = np.random.choice(range(len(x)))\n","        axes1[j][k].set_axis_off()\n","        axes1[j][k].imshow(x[i:i+1][0])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OS1fOz1Jo9nl"},"source":["# Load Packages"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1wAEaWreaD3c","executionInfo":{"status":"ok","timestamp":1623424638907,"user_tz":-420,"elapsed":21617,"user":{"displayName":"Hiruka Shiro","photoUrl":"","userId":"01239836994690731741"}},"outputId":"482a5f6b-106a-43d4-e36c-df0474ef75ed"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"gx-DMPysmp9N","executionInfo":{"status":"ok","timestamp":1623424652263,"user_tz":-420,"elapsed":2886,"user":{"displayName":"Hiruka Shiro","photoUrl":"","userId":"01239836994690731741"}}},"source":["from __future__ import print_function\n","import tensorflow.keras\n","from tensorflow.keras.layers import Dense, Conv2D\n","from tensorflow.keras.layers import BatchNormalization, Activation\n","from tensorflow.keras.layers import AveragePooling2D, Input, Flatten\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras.callbacks import ModelCheckpoint\n","from tensorflow.keras.callbacks import LearningRateScheduler\n","from tensorflow.keras.callbacks import ReduceLROnPlateau\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.regularizers import l2\n","from tensorflow.keras import backend as K\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.datasets import cifar10\n","import numpy as np\n","import os\n","import h5py\n","import tensorflow as tf\n","\n","import matplotlib.pyplot as plt\n","from sklearn.model_selection import train_test_split\n","from sklearn.decomposition import PCA"],"execution_count":5,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6xdVXeuBasG3"},"source":["# Checking the Dataset"]},{"cell_type":"markdown","metadata":{"id":"T-3SoTFADBYr"},"source":["py = 0, ey = 1"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lmMVdpFqZ8h-","executionInfo":{"status":"ok","timestamp":1623427016272,"user_tz":-420,"elapsed":7920,"user":{"displayName":"Hiruka Shiro","photoUrl":"","userId":"01239836994690731741"}},"outputId":"f886a6ec-aa45-4faa-ac6d-616332bec471"},"source":["with h5py.File(\"/content/drive/My Drive/Projects/GSoC 2021/electron-photon-dataset/photon.hdf5\", \"r\") as f:\n","  px = np.asarray(f['X'][()], dtype=np.float32)\n","  py = np.asarray(f['y'][()], dtype=np.float32)\n","  print(\"Loaded photon dataset!\")\n","\n","with h5py.File(\"/content/drive/My Drive/Projects/GSoC 2021/electron-photon-dataset/electron.hdf5\", \"r\") as f:\n","  ex = np.asarray(f['X'][()], dtype=np.float32)\n","  ey = np.asarray(f['y'][()], dtype=np.float32)\n","  print(\"Loaded electron dataset!\")\n","\n","print(\"Photon dataset shape:\", px.shape, py.shape)\n","print(\"Electron dataset shape:\", ex.shape, ey.shape)"],"execution_count":18,"outputs":[{"output_type":"stream","text":["Loaded photon dataset!\n","Loaded electron dataset!\n","Photon dataset shape: (249000, 32, 32, 2) (249000,)\n","Electron dataset shape: (249000, 32, 32, 2) (249000,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XP08ZPFOaY1O","executionInfo":{"status":"ok","timestamp":1623427017410,"user_tz":-420,"elapsed":1142,"user":{"displayName":"Hiruka Shiro","photoUrl":"","userId":"01239836994690731741"}},"outputId":"fac250a7-833f-430d-d32f-4cb31107d3d0"},"source":["max_photon, min_photon = np.max(px[:, :, :, 0]), np.min(px[:, :, :, 0])\n","max_electron, min_electron = np.max(ex[:, :, :, 0]), np.min(ex[:, :, :, 0])\n","\n","print(max_photon, min_photon)\n","print(max_electron, min_electron)"],"execution_count":19,"outputs":[{"output_type":"stream","text":["1.4849443 0.0\n","1.431813 0.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"68JbAEPpiJug","executionInfo":{"status":"ok","timestamp":1623427017411,"user_tz":-420,"elapsed":7,"user":{"displayName":"Hiruka Shiro","photoUrl":"","userId":"01239836994690731741"}},"outputId":"dec4c728-9dea-4a45-953a-40d8bfeb6a31"},"source":["max(max_photon, abs(min_photon), max_electron, abs(min_electron))"],"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.4849443"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"code","metadata":{"id":"FtO_4aJfZ7ue","executionInfo":{"status":"ok","timestamp":1623427018038,"user_tz":-420,"elapsed":631,"user":{"displayName":"Hiruka Shiro","photoUrl":"","userId":"01239836994690731741"}}},"source":["X = np.concatenate((px[:, :, :, 0], ex[:, :, :, 0]), axis=0)\n","y = np.concatenate((py, ey), axis=0)\n","\n","del px, py, ex, ey"],"execution_count":21,"outputs":[]},{"cell_type":"code","metadata":{"id":"AnnEzYSuoIIp","executionInfo":{"status":"ok","timestamp":1623424673988,"user_tz":-420,"elapsed":5601,"user":{"displayName":"Hiruka Shiro","photoUrl":"","userId":"01239836994690731741"}}},"source":["img_size = 32\n","adjacency = np.zeros((img_size**2, img_size**2), dtype=np.float64)\n","gaussian_scale = np.pi\n","\n","# k = y-axis of the A matrix\n","# i = y-axis of the image\n","# j = x-axis of the image\n","for k in range(img_size**2):\n","    for i in range(img_size):\n","        for j in range(img_size):\n","            x_1 = k%img_size  # x coordinate of the pixel-k in the A matrix\n","            x_2 = j  # x coordinate of the image\n","\n","            y_1 = int(k/img_size)  # y coordinate of the pixel-k in the A matrix\n","            y_2 = i  # y coordinate of the image\n","\n","            adjacency[k, i*img_size + j] = np.exp(-np.sqrt((x_1-x_2)**2 + (y_1-y_2)**2)/(gaussian_scale**2))"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":287},"id":"AdLfPkvzoLHe","executionInfo":{"status":"ok","timestamp":1623424673993,"user_tz":-420,"elapsed":13,"user":{"displayName":"Hiruka Shiro","photoUrl":"","userId":"01239836994690731741"}},"outputId":"d6b11fe9-9fa2-40fb-88f4-3080391d399f"},"source":["plt.imshow(np.log10(adjacency))"],"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f08c9ea2ed0>"]},"metadata":{"tags":[]},"execution_count":11},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":287},"id":"GRk0zMJkoQe1","executionInfo":{"status":"ok","timestamp":1623424675214,"user_tz":-420,"elapsed":1230,"user":{"displayName":"Hiruka Shiro","photoUrl":"","userId":"01239836994690731741"}},"outputId":"2166185c-af4f-4eee-f553-0f21a26ed246"},"source":["plt.imshow(adjacency)"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f08c8194e90>"]},"metadata":{"tags":[]},"execution_count":12},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"F6Jg-Roixgn8","executionInfo":{"status":"ok","timestamp":1623427271220,"user_tz":-420,"elapsed":22541,"user":{"displayName":"Hiruka Shiro","photoUrl":"","userId":"01239836994690731741"}},"outputId":"b7ba73d4-f06e-49b0-f8d4-24cb69584bd8"},"source":["# graph convolve the images\n","\n","X = ((adjacency@adjacency@(X.reshape(-1, 32*32).T)).T.reshape(-1, 32, 32))\n","X.shape"],"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(498000, 32, 32)"]},"metadata":{"tags":[]},"execution_count":26}]},{"cell_type":"code","metadata":{"id":"zvg1-kbmEoBE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1623427326116,"user_tz":-420,"elapsed":8192,"user":{"displayName":"Hiruka Shiro","photoUrl":"","userId":"01239836994690731741"}},"outputId":"a6e7cea7-eb93-4f73-8f42-be23ebfcb08f"},"source":["x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.15, random_state=2021)\n","\n","x_train = x_train.reshape(-1, 32, 32, 1)\n","x_test = x_test.reshape(-1, 32, 32, 1)\n","y_train = y_train.reshape(-1, 1)\n","y_test = y_test.reshape(-1, 1)\n","\n","print(X.shape, y.shape)\n","print(\"Train set shape:\", x_train.shape, y_train.shape)\n","print(\"Test set shape:\", x_test.shape, y_test.shape)"],"execution_count":27,"outputs":[{"output_type":"stream","text":["(498000, 32, 32) (498000,)\n","Train set shape: (423300, 32, 32, 1) (423300, 1)\n","Test set shape: (74700, 32, 32, 1) (74700, 1)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"AKQDnk2Gmp9R"},"source":["We will construct a ResNet and train it on the dataset.  The following block of code defines some constant values that define how the network is constructed."]},{"cell_type":"code","metadata":{"id":"E60qRcFzmp9R","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1623431605118,"user_tz":-420,"elapsed":591,"user":{"displayName":"Hiruka Shiro","photoUrl":"","userId":"01239836994690731741"}},"outputId":"19465c6e-ed3b-4ea8-de2a-8f07794a97d1"},"source":["# Training parameters\n","BATCH_SIZE = 128  # orig paper trained all networks with batch_size=128\n","EPOCHS = 200 # 200\n","USE_AUGMENTATION = False\n","NUM_CLASSES = np.unique(y_train).shape[0] # 10\n","COLORS = x_train.shape[3]\n","\n","# Subtracting pixel mean improves accuracy\n","SUBTRACT_PIXEL_MEAN = True\n","\n","# Model version\n","# Orig paper: version = 1 (ResNet v1), \n","# Improved ResNet: version = 2 \n","# (ResNet v2)\n","VERSION = 2\n","\n","# Computed depth from supplied model parameter n\n","if VERSION == 1:\n","    DEPTH = COLORS * 6 + 2\n","elif VERSION == 2:\n","    DEPTH = COLORS * 9 + 2\n","\n","# Print parameters for sanity check\n","print(\"Batch size, epochs:\", BATCH_SIZE, EPOCHS)\n","print(\"Total class:\", NUM_CLASSES)\n","print(\"Use Augmentation:\", USE_AUGMENTATION)\n","print(\"Subtracting pixel mean:\", SUBTRACT_PIXEL_MEAN)\n","print(\"Color channel:\", COLORS)\n","print(\"ResNet Version:\", VERSION)\n","print(\"Network Depth:\", DEPTH)"],"execution_count":36,"outputs":[{"output_type":"stream","text":["Batch size, epochs: 128 200\n","Total class: 2\n","Use Augmentation: False\n","Subtracting pixel mean: True\n","Color channel: 1\n","ResNet Version: 2\n","Network Depth: 11\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"I91EXi2hmp9T"},"source":["The following function implements a learning rate decay schedule."]},{"cell_type":"code","metadata":{"id":"pHUm2jSUmp9T","executionInfo":{"status":"ok","timestamp":1623431608617,"user_tz":-420,"elapsed":533,"user":{"displayName":"Hiruka Shiro","photoUrl":"","userId":"01239836994690731741"}}},"source":["def lr_schedule(epoch):\n","    \"\"\"Learning Rate Schedule\n","\n","    Learning rate is scheduled to be reduced after 80, 120, 160, 180 epochs.\n","    Called automatically every epoch as part of callbacks during training.\n","\n","    # Arguments\n","        epoch (int): The number of epochs\n","\n","    # Returns\n","        lr (float32): learning rate\n","    \"\"\"\n","    lr = 1e-3\n","    if epoch > 180:\n","        lr *= 0.5e-3\n","    elif epoch > 160:\n","        lr *= 1e-3\n","    elif epoch > 120:\n","        lr *= 1e-2\n","    elif epoch > 80:\n","        lr *= 1e-1\n","    print('Learning rate: ', lr)\n","    return lr"],"execution_count":37,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7-du9R2rmp9V"},"source":["The following code implements a ResNet block.  This includes two convolutional layers with a skip connection.  Both V1 and V2 of ResNet make use of this type of layer."]},{"cell_type":"code","metadata":{"id":"DPXtreZ6mp9V","executionInfo":{"status":"ok","timestamp":1623431609241,"user_tz":-420,"elapsed":4,"user":{"displayName":"Hiruka Shiro","photoUrl":"","userId":"01239836994690731741"}}},"source":["def resnet_layer(inputs,\n","                 num_filters=16,\n","                 kernel_size=3,\n","                 strides=1,\n","                 activation='relu',\n","                 batch_normalization=True,\n","                 conv_first=True):\n","    \"\"\"2D Convolution-Batch Normalization-Activation stack builder\n","\n","    # Arguments\n","        inputs (tensor): input tensor from input image or previous layer\n","        num_filters (int): Conv2D number of filters\n","        kernel_size (int): Conv2D square kernel dimensions\n","        strides (int): Conv2D square stride dimensions\n","        activation (string): activation name\n","        batch_normalization (bool): whether to include batch normalization\n","        conv_first (bool): conv-bn-activation (True) or\n","            bn-activation-conv (False)\n","\n","    # Returns\n","        x (tensor): tensor as input to the next layer\n","    \"\"\"\n","    conv = Conv2D(num_filters,\n","                  kernel_size=kernel_size,\n","                  strides=strides,\n","                  padding='same',\n","                  kernel_initializer='he_normal',\n","                  kernel_regularizer=l2(1e-4))\n","\n","    x = inputs\n","    if conv_first:\n","        x = conv(x)\n","        if batch_normalization:\n","            x = BatchNormalization()(x)\n","        if activation is not None:\n","            x = Activation(activation)(x)\n","    else:\n","        if batch_normalization:\n","            x = BatchNormalization()(x)\n","        if activation is not None:\n","            x = Activation(activation)(x)\n","        x = conv(x)\n","    return x"],"execution_count":38,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FDk1ekrxmp9X"},"source":["### ResNet V1\n","\n","* K. He, X. Zhang, S. Ren, and J. Sun. [Deep residual learning for image recognition](https://arxiv.org/abs/1512.03385). arXiv preprint arXiv:1512.03385,2015."]},{"cell_type":"code","metadata":{"id":"YLQe8BE-mp9X","executionInfo":{"status":"ok","timestamp":1623431610308,"user_tz":-420,"elapsed":2,"user":{"displayName":"Hiruka Shiro","photoUrl":"","userId":"01239836994690731741"}}},"source":["def resnet_v1(input_shape, depth, num_classes=10):\n","    \"\"\"ResNet Version 1 Model builder [a]\n","\n","    Stacks of 2 x (3 x 3) Conv2D-BN-ReLU\n","    Last ReLU is after the shortcut connection.\n","    At the beginning of each stage, the feature \n","    map size is halved (downsampled)\n","    by a convolutional layer with strides=2, while the number of \n","    filters is\n","    doubled. Within each stage, the layers have the same number \n","    filters and the same number of filters.\n","    Features maps sizes:\n","    stage 0: 32x32, 16\n","    stage 1: 16x16, 32\n","    stage 2:  8x8,  64\n","    The Number of parameters is approx the same as Table 6 of [a]:\n","    ResNet20 0.27M\n","    ResNet32 0.46M\n","    ResNet44 0.66M\n","    ResNet56 0.85M\n","    ResNet110 1.7M\n","\n","    # Arguments\n","        input_shape (tensor): shape of input image tensor\n","        depth (int): number of core convolutional layers\n","        num_classes (int): number of classes (CIFAR10 has 10)\n","\n","    # Returns\n","        model (Model): Keras model instance\n","    \"\"\"\n","    if (depth - 2) % 6 != 0:\n","        raise ValueError('depth should be 6n+2 (eg 20, 32, 44 in [a])')\n","    # Start model definition.\n","    num_filters = 16\n","    num_res_blocks = int((depth - 2) / 6)\n","\n","    inputs = Input(shape=input_shape)\n","    x = resnet_layer(inputs=inputs)\n","    # Instantiate the stack of residual units\n","    for stack in range(3):\n","        for res_block in range(num_res_blocks):\n","            strides = 1\n","            # first layer but not first stack\n","            if stack > 0 and res_block == 0:  \n","                strides = 2  # downsample\n","            y = resnet_layer(inputs=x,\n","                             num_filters=num_filters,\n","                             strides=strides)\n","            y = resnet_layer(inputs=y,\n","                             num_filters=num_filters,\n","                             activation=None)\n","            # first layer but not first stack\n","            if stack > 0 and res_block == 0:  \n","                # linear projection residual shortcut connection to match\n","                # changed dims\n","                x = resnet_layer(inputs=x,\n","                                 num_filters=num_filters,\n","                                 kernel_size=1,\n","                                 strides=strides,\n","                                 activation=None,\n","                                 batch_normalization=False)\n","            x = tensorflow.keras.layers.add([x, y])\n","            x = Activation('relu')(x)\n","        num_filters *= 2\n","\n","    # Add classifier on top.\n","    # v1 does not use BN after last shortcut connection-ReLU\n","    x = AveragePooling2D(pool_size=8)(x)\n","    y = Flatten()(x)\n","    outputs = Dense(num_classes,\n","                    activation='softmax',\n","                    kernel_initializer='he_normal')(y)\n","\n","    # Instantiate model.\n","    model = Model(inputs=inputs, outputs=outputs)\n","    return model"],"execution_count":39,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SzNJPXncmp9a"},"source":["### ResNet V2\n","\n","A second version of ResNet was introduced in the following paper.  This form of ResNet is commonly referred to as ResNet V2.\n","\n","* He, K., Zhang, X., Ren, S., & Sun, J. (2016, October). [Identity mappings in deep residual networks](https://arxiv.org/abs/1603.05027). In European conference on computer vision (pp. 630-645). Springer, Cham.\n","\n","The following code constructs a ResNet V2 network.  The primary difference of the full preactivation 'v2' variant compared to the 'v1' variant is the use of [batch normalization](https://arxiv.org/abs/1502.03167) before every weight layer."]},{"cell_type":"code","metadata":{"id":"8WfihOPhmp9a","executionInfo":{"status":"ok","timestamp":1623431610914,"user_tz":-420,"elapsed":4,"user":{"displayName":"Hiruka Shiro","photoUrl":"","userId":"01239836994690731741"}}},"source":["def resnet_v2(input_shape, depth, num_classes=10):\n","    \"\"\"ResNet Version 2 Model builder [b]\n","\n","    Stacks of (1 x 1)-(3 x 3)-(1 x 1) BN-ReLU-Conv2D or also known as\n","    bottleneck layer\n","    First shortcut connection per layer is 1 x 1 Conv2D.\n","    Second and onwards shortcut connection is identity.\n","    At the beginning of each stage, the feature map size is \n","    halved (downsampled) by a convolutional layer with \n","    strides=2, while the number of filter maps is\n","    doubled. Within each stage, the layers have the same\n","    number filters and the same filter map sizes.\n","    Features maps sizes:\n","    conv1  : 32x32,  16\n","    stage 0: 32x32,  64\n","    stage 1: 16x16, 128\n","    stage 2:  8x8,  256\n","\n","    # Arguments\n","        input_shape (tensor): shape of input image tensor\n","        depth (int): number of core convolutional layers\n","        num_classes (int): number of classes (CIFAR10 has 10)\n","\n","    # Returns\n","        model (Model): Keras model instance\n","    \"\"\"\n","    if (depth - 2) % 9 != 0:\n","        raise ValueError('depth should be 9n+2 (eg 56 or 110 in [b])')\n","    # Start model definition.\n","    num_filters_in = 16\n","    num_res_blocks = int((depth - 2) / 9)\n","\n","    inputs = Input(shape=input_shape)\n","    # v2 performs Conv2D with BN-ReLU on input before splitting into 2 paths\n","    x = resnet_layer(inputs=inputs,\n","                     num_filters=num_filters_in,\n","                     conv_first=True)\n","\n","    # Instantiate the stack of residual units\n","    for stage in range(3):\n","        for res_block in range(num_res_blocks):\n","            activation = 'relu'\n","            batch_normalization = True\n","            strides = 1\n","            if stage == 0:\n","                num_filters_out = num_filters_in * 4\n","                if res_block == 0:  # first layer and first stage\n","                    activation = None\n","                    batch_normalization = False\n","            else:\n","                num_filters_out = num_filters_in * 2\n","                if res_block == 0:  # first layer but not first stage\n","                    strides = 2    # downsample\n","\n","            # bottleneck residual unit\n","            y = resnet_layer(inputs=x,\n","                             num_filters=num_filters_in,\n","                             kernel_size=1,\n","                             strides=strides,\n","                             activation=activation,\n","                             batch_normalization=batch_normalization,\n","                             conv_first=False)\n","            y = resnet_layer(inputs=y,\n","                             num_filters=num_filters_in,\n","                             conv_first=False)\n","            y = resnet_layer(inputs=y,\n","                             num_filters=num_filters_out,\n","                             kernel_size=1,\n","                             conv_first=False)\n","            if res_block == 0:\n","                # linear projection residual shortcut connection to match\n","                # changed dims\n","                x = resnet_layer(inputs=x,\n","                                 num_filters=num_filters_out,\n","                                 kernel_size=1,\n","                                 strides=strides,\n","                                 activation=None,\n","                                 batch_normalization=False)\n","            x = tensorflow.keras.layers.add([x, y])\n","\n","        num_filters_in = num_filters_out\n","\n","    # Add classifier on top.\n","    # v2 has BN-ReLU before Pooling\n","    x = BatchNormalization()(x)\n","    x = Activation('relu')(x)\n","    x = AveragePooling2D(pool_size=8)(x)\n","    y = Flatten()(x)\n","    outputs = Dense(num_classes,\n","                    activation='softmax',\n","                    kernel_initializer='he_normal')(y)\n","\n","    # Instantiate model.\n","    model = Model(inputs=inputs, outputs=outputs)\n","    return model"],"execution_count":40,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-CzYSlxSmp9c"},"source":["With all of this defined, we can run the ResNet."]},{"cell_type":"code","metadata":{"id":"-WWqx2UaENxu"},"source":["# Input image dimensions.\n","input_shape = x_train.shape[1:]\n","pixel_max_val = max(max_photon, abs(min_photon), max_electron, abs(min_electron))\n","\n","# Normalize data.\n","x_train = x_train.astype('float32') / pixel_max_val\n","x_test = x_test.astype('float32') / pixel_max_val\n","\n","# If subtract pixel mean is enabled\n","if SUBTRACT_PIXEL_MEAN:\n","    x_train_mean = np.mean(x_train, axis=0)\n","    x_train -= x_train_mean\n","    x_test -= x_train_mean\n","\n","# Convert class vectors to binary class matrices.\n","y_train = tensorflow.keras.utils.to_categorical(y_train, NUM_CLASSES)\n","y_test = tensorflow.keras.utils.to_categorical(y_test, NUM_CLASSES)\n","\n","print('x_train shape:', x_train.shape)\n","print(x_train.shape[0], 'train samples')\n","print(x_test.shape[0], 'test samples')\n","print('y_train shape:', y_train.shape)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Jg7cCBZnmp9c","executionInfo":{"status":"ok","timestamp":1623431637466,"user_tz":-420,"elapsed":369,"user":{"displayName":"Hiruka Shiro","photoUrl":"","userId":"01239836994690731741"}},"outputId":"b4bd683c-7b09-44ed-fa36-c31e447ac68d"},"source":["# Create the neural network\n","if VERSION == 2:\n","    model = resnet_v2(input_shape=input_shape, depth=DEPTH, num_classes=NUM_CLASSES)\n","else:\n","    model = resnet_v1(input_shape=input_shape, depth=DEPTH, num_classes=NUM_CLASSES)\n","\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=Adam(lr=lr_schedule(0)),\n","              metrics=['accuracy', tf.keras.metrics.AUC()])\n","model.summary()\n"],"execution_count":41,"outputs":[{"output_type":"stream","text":["Learning rate:  0.001\n","Model: \"model_1\"\n","__________________________________________________________________________________________________\n","Layer (type)                    Output Shape         Param #     Connected to                     \n","==================================================================================================\n","input_2 (InputLayer)            [(None, 32, 32, 1)]  0                                            \n","__________________________________________________________________________________________________\n","conv2d_13 (Conv2D)              (None, 32, 32, 16)   160         input_2[0][0]                    \n","__________________________________________________________________________________________________\n","batch_normalization_10 (BatchNo (None, 32, 32, 16)   64          conv2d_13[0][0]                  \n","__________________________________________________________________________________________________\n","activation_10 (Activation)      (None, 32, 32, 16)   0           batch_normalization_10[0][0]     \n","__________________________________________________________________________________________________\n","conv2d_14 (Conv2D)              (None, 32, 32, 16)   272         activation_10[0][0]              \n","__________________________________________________________________________________________________\n","batch_normalization_11 (BatchNo (None, 32, 32, 16)   64          conv2d_14[0][0]                  \n","__________________________________________________________________________________________________\n","activation_11 (Activation)      (None, 32, 32, 16)   0           batch_normalization_11[0][0]     \n","__________________________________________________________________________________________________\n","conv2d_15 (Conv2D)              (None, 32, 32, 16)   2320        activation_11[0][0]              \n","__________________________________________________________________________________________________\n","batch_normalization_12 (BatchNo (None, 32, 32, 16)   64          conv2d_15[0][0]                  \n","__________________________________________________________________________________________________\n","activation_12 (Activation)      (None, 32, 32, 16)   0           batch_normalization_12[0][0]     \n","__________________________________________________________________________________________________\n","conv2d_17 (Conv2D)              (None, 32, 32, 64)   1088        activation_10[0][0]              \n","__________________________________________________________________________________________________\n","conv2d_16 (Conv2D)              (None, 32, 32, 64)   1088        activation_12[0][0]              \n","__________________________________________________________________________________________________\n","add_3 (Add)                     (None, 32, 32, 64)   0           conv2d_17[0][0]                  \n","                                                                 conv2d_16[0][0]                  \n","__________________________________________________________________________________________________\n","batch_normalization_13 (BatchNo (None, 32, 32, 64)   256         add_3[0][0]                      \n","__________________________________________________________________________________________________\n","activation_13 (Activation)      (None, 32, 32, 64)   0           batch_normalization_13[0][0]     \n","__________________________________________________________________________________________________\n","conv2d_18 (Conv2D)              (None, 16, 16, 64)   4160        activation_13[0][0]              \n","__________________________________________________________________________________________________\n","batch_normalization_14 (BatchNo (None, 16, 16, 64)   256         conv2d_18[0][0]                  \n","__________________________________________________________________________________________________\n","activation_14 (Activation)      (None, 16, 16, 64)   0           batch_normalization_14[0][0]     \n","__________________________________________________________________________________________________\n","conv2d_19 (Conv2D)              (None, 16, 16, 64)   36928       activation_14[0][0]              \n","__________________________________________________________________________________________________\n","batch_normalization_15 (BatchNo (None, 16, 16, 64)   256         conv2d_19[0][0]                  \n","__________________________________________________________________________________________________\n","activation_15 (Activation)      (None, 16, 16, 64)   0           batch_normalization_15[0][0]     \n","__________________________________________________________________________________________________\n","conv2d_21 (Conv2D)              (None, 16, 16, 128)  8320        add_3[0][0]                      \n","__________________________________________________________________________________________________\n","conv2d_20 (Conv2D)              (None, 16, 16, 128)  8320        activation_15[0][0]              \n","__________________________________________________________________________________________________\n","add_4 (Add)                     (None, 16, 16, 128)  0           conv2d_21[0][0]                  \n","                                                                 conv2d_20[0][0]                  \n","__________________________________________________________________________________________________\n","batch_normalization_16 (BatchNo (None, 16, 16, 128)  512         add_4[0][0]                      \n","__________________________________________________________________________________________________\n","activation_16 (Activation)      (None, 16, 16, 128)  0           batch_normalization_16[0][0]     \n","__________________________________________________________________________________________________\n","conv2d_22 (Conv2D)              (None, 8, 8, 128)    16512       activation_16[0][0]              \n","__________________________________________________________________________________________________\n","batch_normalization_17 (BatchNo (None, 8, 8, 128)    512         conv2d_22[0][0]                  \n","__________________________________________________________________________________________________\n","activation_17 (Activation)      (None, 8, 8, 128)    0           batch_normalization_17[0][0]     \n","__________________________________________________________________________________________________\n","conv2d_23 (Conv2D)              (None, 8, 8, 128)    147584      activation_17[0][0]              \n","__________________________________________________________________________________________________\n","batch_normalization_18 (BatchNo (None, 8, 8, 128)    512         conv2d_23[0][0]                  \n","__________________________________________________________________________________________________\n","activation_18 (Activation)      (None, 8, 8, 128)    0           batch_normalization_18[0][0]     \n","__________________________________________________________________________________________________\n","conv2d_25 (Conv2D)              (None, 8, 8, 256)    33024       add_4[0][0]                      \n","__________________________________________________________________________________________________\n","conv2d_24 (Conv2D)              (None, 8, 8, 256)    33024       activation_18[0][0]              \n","__________________________________________________________________________________________________\n","add_5 (Add)                     (None, 8, 8, 256)    0           conv2d_25[0][0]                  \n","                                                                 conv2d_24[0][0]                  \n","__________________________________________________________________________________________________\n","batch_normalization_19 (BatchNo (None, 8, 8, 256)    1024        add_5[0][0]                      \n","__________________________________________________________________________________________________\n","activation_19 (Activation)      (None, 8, 8, 256)    0           batch_normalization_19[0][0]     \n","__________________________________________________________________________________________________\n","average_pooling2d_1 (AveragePoo (None, 1, 1, 256)    0           activation_19[0][0]              \n","__________________________________________________________________________________________________\n","flatten_1 (Flatten)             (None, 256)          0           average_pooling2d_1[0][0]        \n","__________________________________________________________________________________________________\n","dense_1 (Dense)                 (None, 2)            514         flatten_1[0][0]                  \n","==================================================================================================\n","Total params: 296,834\n","Trainable params: 295,074\n","Non-trainable params: 1,760\n","__________________________________________________________________________________________________\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/optimizer_v2/optimizer_v2.py:375: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n","  \"The `lr` argument is deprecated, use `learning_rate` instead.\")\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"vzR5DIqZK-iD"},"source":["model = tf.keras.models.load_model(\"/content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-150epoch.h5\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"CC1x1NIvmp9f","executionInfo":{"status":"ok","timestamp":1623431647430,"user_tz":-420,"elapsed":350,"user":{"displayName":"Hiruka Shiro","photoUrl":"","userId":"01239836994690731741"}}},"source":["# Prepare callbacks for model saving and for learning rate adjustment.\n","lr_scheduler = LearningRateScheduler(lr_schedule)\n","\n","lr_reducer = ReduceLROnPlateau(factor=np.sqrt(0.1),\n","                               cooldown=0,\n","                               patience=5,\n","                               min_lr=0.5e-6)\n","\n","cp_filepath = \"/content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v\" + str(VERSION) + \"-withGC-{epoch:02d}epoch.h5\"\n","checkpoint_callback_epoch = tf.keras.callbacks.ModelCheckpoint(\n","    cp_filepath, monitor='val_loss', verbose=1, save_best_only=False,\n","    save_weights_only=False, mode='auto', save_freq='epoch'\n",")\n","# cp_filepath_batch = \"./Model/ResNet-v\" + str(VERSION) + \"-{epoch:02d}epoch-{batch:02d}batch.h5\"\n","# checkpoint_callback_batch = tf.keras.callbacks.ModelCheckpoint(\n","#     cp_filepath_batch, monitor='val_loss', verbose=1, save_best_only=False,\n","#     save_weights_only=False, mode='auto', save_freq=500\n","# )\n","\n","callbacks = [lr_reducer, lr_scheduler, checkpoint_callback_epoch]"],"execution_count":42,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0EIHcWL5Qd1k","executionInfo":{"status":"ok","timestamp":1623447577273,"user_tz":-420,"elapsed":4087334,"user":{"displayName":"Hiruka Shiro","photoUrl":"","userId":"01239836994690731741"}},"outputId":"f7adf212-5d25-405f-b64a-3127384b3244"},"source":["import time\n","start_time = time.time()\n","\n","last_epoch = 0\n","\n","# Run training, with or without data augmentation.\n","if not USE_AUGMENTATION:\n","    print('Not using data augmentation.')\n","    model.fit(x_train, y_train, initial_epoch=last_epoch,\n","              batch_size=BATCH_SIZE,\n","              epochs=EPOCHS,\n","              validation_data=(x_test, y_test),\n","              shuffle=True,\n","              callbacks=callbacks)\n","else:\n","    print('Using real-time data augmentation.')\n","    # This will do preprocessing and realtime data augmentation:\n","    datagen = ImageDataGenerator(\n","        # set input mean to 0 over the dataset\n","        featurewise_center=False,\n","        # set each sample mean to 0\n","        samplewise_center=False,\n","        # divide inputs by std of dataset\n","        featurewise_std_normalization=False,\n","        # divide each input by its std\n","        samplewise_std_normalization=False,\n","        # apply ZCA whitening\n","        zca_whitening=False,\n","        # epsilon for ZCA whitening\n","        zca_epsilon=1e-06,\n","        # randomly rotate images in the range (deg 0 to 180)\n","        rotation_range=0,\n","        # randomly shift images horizontally\n","        width_shift_range=0.1,\n","        # randomly shift images vertically\n","        height_shift_range=0.1,\n","        # set range for random shear\n","        shear_range=0.,\n","        # set range for random zoom\n","        zoom_range=0.,\n","        # set range for random channel shifts\n","        channel_shift_range=0.,\n","        # set mode for filling points outside the input boundaries\n","        fill_mode='nearest',\n","        # value used for fill_mode = \"constant\"\n","        cval=0.,\n","        # randomly flip images\n","        horizontal_flip=True,\n","        # randomly flip images\n","        vertical_flip=False,\n","        # set rescaling factor (applied before any other transformation)\n","        rescale=None,\n","        # set function that will be applied on each input\n","        preprocessing_function=None,\n","        # image data format, either \"channels_first\" or \"channels_last\"\n","        data_format=None,\n","        # fraction of images reserved for validation \n","        # (strictly between 0 and 1)\n","        validation_split=0.0)\n","\n","    # Compute quantities required for featurewise normalization\n","    # (std, mean, and principal components if ZCA whitening is applied).\n","    datagen.fit(x_train)\n","\n","    # Fit the model on the batches generated by datagen.flow().\n","    model.fit_generator(datagen.flow(x_train, y_train, \n","                        batch_size=BATCH_SIZE),\n","                        validation_data=(x_test, y_test),\n","                        epochs=EPOCHS, verbose=1, workers=1,\n","                        callbacks=callbacks, \n","                        use_multiprocessing=False)\n","    \n","elapsed_time = time.time() - start_time\n","print(\"Elapsed time: {}\".format(hms_string(elapsed_time)))"],"execution_count":43,"outputs":[{"output_type":"stream","text":["Not using data augmentation.\n","Epoch 1/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 82s 24ms/step - loss: 0.7666 - accuracy: 0.5161 - auc_1: 0.5266 - val_loss: 0.8592 - val_accuracy: 0.4972 - val_auc_1: 0.5034\n","\n","Epoch 00001: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-01epoch.h5\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/utils/generic_utils.py:497: CustomMaskWarning: Custom mask layers require a config and must override get_config. When loading, the custom mask layer must be passed to the custom_objects argument.\n","  category=CustomMaskWarning)\n"],"name":"stderr"},{"output_type":"stream","text":["Epoch 2/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6975 - accuracy: 0.5175 - auc_1: 0.5314 - val_loss: 0.7551 - val_accuracy: 0.5059 - val_auc_1: 0.5096\n","\n","Epoch 00002: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-02epoch.h5\n","Epoch 3/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6931 - accuracy: 0.5173 - auc_1: 0.5307 - val_loss: 0.6963 - val_accuracy: 0.5187 - val_auc_1: 0.5272\n","\n","Epoch 00003: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-03epoch.h5\n","Epoch 4/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6918 - accuracy: 0.5189 - auc_1: 0.5340 - val_loss: 0.6926 - val_accuracy: 0.5105 - val_auc_1: 0.5297\n","\n","Epoch 00004: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-04epoch.h5\n","Epoch 5/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6910 - accuracy: 0.5215 - auc_1: 0.5380 - val_loss: 0.7150 - val_accuracy: 0.5028 - val_auc_1: 0.5015\n","\n","Epoch 00005: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-05epoch.h5\n","Epoch 6/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6897 - accuracy: 0.5246 - auc_1: 0.5439 - val_loss: 0.6996 - val_accuracy: 0.5071 - val_auc_1: 0.5107\n","\n","Epoch 00006: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-06epoch.h5\n","Epoch 7/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6885 - accuracy: 0.5287 - auc_1: 0.5497 - val_loss: 0.6867 - val_accuracy: 0.5335 - val_auc_1: 0.5544\n","\n","Epoch 00007: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-07epoch.h5\n","Epoch 8/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6874 - accuracy: 0.5314 - auc_1: 0.5545 - val_loss: 0.8051 - val_accuracy: 0.5059 - val_auc_1: 0.5068\n","\n","Epoch 00008: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-08epoch.h5\n","Epoch 9/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6872 - accuracy: 0.5334 - auc_1: 0.5567 - val_loss: 0.7539 - val_accuracy: 0.5036 - val_auc_1: 0.5016\n","\n","Epoch 00009: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-09epoch.h5\n","Epoch 10/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6860 - accuracy: 0.5366 - auc_1: 0.5618 - val_loss: 0.6930 - val_accuracy: 0.5238 - val_auc_1: 0.5397\n","\n","Epoch 00010: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-10epoch.h5\n","Epoch 11/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6859 - accuracy: 0.5368 - auc_1: 0.5619 - val_loss: 0.6975 - val_accuracy: 0.5116 - val_auc_1: 0.5187\n","\n","Epoch 00011: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-11epoch.h5\n","Epoch 12/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6855 - accuracy: 0.5384 - auc_1: 0.5648 - val_loss: 0.6852 - val_accuracy: 0.5385 - val_auc_1: 0.5704\n","\n","Epoch 00012: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-12epoch.h5\n","Epoch 13/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6849 - accuracy: 0.5386 - auc_1: 0.5660 - val_loss: 0.7099 - val_accuracy: 0.5028 - val_auc_1: 0.5006\n","\n","Epoch 00013: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-13epoch.h5\n","Epoch 14/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6844 - accuracy: 0.5399 - auc_1: 0.5675 - val_loss: 0.6918 - val_accuracy: 0.5247 - val_auc_1: 0.5419\n","\n","Epoch 00014: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-14epoch.h5\n","Epoch 15/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6838 - accuracy: 0.5407 - auc_1: 0.5697 - val_loss: 0.7013 - val_accuracy: 0.5147 - val_auc_1: 0.5216\n","\n","Epoch 00015: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-15epoch.h5\n","Epoch 16/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6836 - accuracy: 0.5422 - auc_1: 0.5708 - val_loss: 0.7189 - val_accuracy: 0.5061 - val_auc_1: 0.5119\n","\n","Epoch 00016: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-16epoch.h5\n","Epoch 17/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6831 - accuracy: 0.5427 - auc_1: 0.5730 - val_loss: 0.6845 - val_accuracy: 0.5404 - val_auc_1: 0.5679\n","\n","Epoch 00017: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-17epoch.h5\n","Epoch 18/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6827 - accuracy: 0.5436 - auc_1: 0.5742 - val_loss: 0.6882 - val_accuracy: 0.5327 - val_auc_1: 0.5551\n","\n","Epoch 00018: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-18epoch.h5\n","Epoch 19/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6825 - accuracy: 0.5447 - auc_1: 0.5756 - val_loss: 0.7086 - val_accuracy: 0.5143 - val_auc_1: 0.5234\n","\n","Epoch 00019: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-19epoch.h5\n","Epoch 20/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6848 - accuracy: 0.5379 - auc_1: 0.5647 - val_loss: 0.6979 - val_accuracy: 0.5108 - val_auc_1: 0.5156\n","\n","Epoch 00020: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-20epoch.h5\n","Epoch 21/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6925 - accuracy: 0.5144 - auc_1: 0.5239 - val_loss: 0.6980 - val_accuracy: 0.5036 - val_auc_1: 0.5045\n","\n","Epoch 00021: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-21epoch.h5\n","Epoch 22/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6916 - accuracy: 0.5183 - auc_1: 0.5311 - val_loss: 0.6920 - val_accuracy: 0.5149 - val_auc_1: 0.5276\n","\n","Epoch 00022: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-22epoch.h5\n","Epoch 23/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6879 - accuracy: 0.5294 - auc_1: 0.5499 - val_loss: 0.7478 - val_accuracy: 0.5005 - val_auc_1: 0.5096\n","\n","Epoch 00023: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-23epoch.h5\n","Epoch 24/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6863 - accuracy: 0.5329 - auc_1: 0.5575 - val_loss: 0.6937 - val_accuracy: 0.5241 - val_auc_1: 0.5465\n","\n","Epoch 00024: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-24epoch.h5\n","Epoch 25/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6871 - accuracy: 0.5299 - auc_1: 0.5532 - val_loss: 0.6875 - val_accuracy: 0.5304 - val_auc_1: 0.5526\n","\n","Epoch 00025: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-25epoch.h5\n","Epoch 26/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6851 - accuracy: 0.5348 - auc_1: 0.5613 - val_loss: 0.7017 - val_accuracy: 0.5201 - val_auc_1: 0.5367\n","\n","Epoch 00026: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-26epoch.h5\n","Epoch 27/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6846 - accuracy: 0.5367 - auc_1: 0.5639 - val_loss: 0.7190 - val_accuracy: 0.4968 - val_auc_1: 0.5053\n","\n","Epoch 00027: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-27epoch.h5\n","Epoch 28/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6840 - accuracy: 0.5369 - auc_1: 0.5657 - val_loss: 0.7083 - val_accuracy: 0.5004 - val_auc_1: 0.5081\n","\n","Epoch 00028: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-28epoch.h5\n","Epoch 29/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6835 - accuracy: 0.5392 - auc_1: 0.5688 - val_loss: 0.7432 - val_accuracy: 0.5029 - val_auc_1: 0.4985\n","\n","Epoch 00029: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-29epoch.h5\n","Epoch 30/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6831 - accuracy: 0.5406 - auc_1: 0.5712 - val_loss: 0.7030 - val_accuracy: 0.5060 - val_auc_1: 0.5130\n","\n","Epoch 00030: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-30epoch.h5\n","Epoch 31/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6823 - accuracy: 0.5428 - auc_1: 0.5734 - val_loss: 0.7082 - val_accuracy: 0.5058 - val_auc_1: 0.5032\n","\n","Epoch 00031: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-31epoch.h5\n","Epoch 32/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6820 - accuracy: 0.5444 - auc_1: 0.5758 - val_loss: 0.7222 - val_accuracy: 0.5016 - val_auc_1: 0.5011\n","\n","Epoch 00032: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-32epoch.h5\n","Epoch 33/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6818 - accuracy: 0.5441 - auc_1: 0.5753 - val_loss: 0.7060 - val_accuracy: 0.5057 - val_auc_1: 0.5079\n","\n","Epoch 00033: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-33epoch.h5\n","Epoch 34/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6816 - accuracy: 0.5434 - auc_1: 0.5765 - val_loss: 0.6851 - val_accuracy: 0.5419 - val_auc_1: 0.5694\n","\n","Epoch 00034: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-34epoch.h5\n","Epoch 35/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6839 - accuracy: 0.5397 - auc_1: 0.5675 - val_loss: 0.7284 - val_accuracy: 0.5027 - val_auc_1: 0.5061\n","\n","Epoch 00035: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-35epoch.h5\n","Epoch 36/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6822 - accuracy: 0.5436 - auc_1: 0.5748 - val_loss: 0.6851 - val_accuracy: 0.5387 - val_auc_1: 0.5651\n","\n","Epoch 00036: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-36epoch.h5\n","Epoch 37/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6936 - accuracy: 0.5080 - auc_1: 0.5132 - val_loss: 0.6938 - val_accuracy: 0.5071 - val_auc_1: 0.5141\n","\n","Epoch 00037: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-37epoch.h5\n","Epoch 38/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6936 - accuracy: 0.5076 - auc_1: 0.5132 - val_loss: 0.6934 - val_accuracy: 0.5055 - val_auc_1: 0.5108\n","\n","Epoch 00038: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-38epoch.h5\n","Epoch 39/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6933 - accuracy: 0.5087 - auc_1: 0.5144 - val_loss: 0.6931 - val_accuracy: 0.5070 - val_auc_1: 0.5142\n","\n","Epoch 00039: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-39epoch.h5\n","Epoch 40/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6932 - accuracy: 0.5088 - auc_1: 0.5150 - val_loss: 0.7009 - val_accuracy: 0.4966 - val_auc_1: 0.4985\n","\n","Epoch 00040: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-40epoch.h5\n","Epoch 41/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6920 - accuracy: 0.5146 - auc_1: 0.5242 - val_loss: 0.6984 - val_accuracy: 0.5115 - val_auc_1: 0.5152\n","\n","Epoch 00041: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-41epoch.h5\n","Epoch 42/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6908 - accuracy: 0.5228 - auc_1: 0.5341 - val_loss: 0.7065 - val_accuracy: 0.5151 - val_auc_1: 0.5147\n","\n","Epoch 00042: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-42epoch.h5\n","Epoch 43/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6906 - accuracy: 0.5224 - auc_1: 0.5347 - val_loss: 0.6946 - val_accuracy: 0.5095 - val_auc_1: 0.5138\n","\n","Epoch 00043: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-43epoch.h5\n","Epoch 44/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6907 - accuracy: 0.5222 - auc_1: 0.5342 - val_loss: 0.6906 - val_accuracy: 0.5184 - val_auc_1: 0.5288\n","\n","Epoch 00044: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-44epoch.h5\n","Epoch 45/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6904 - accuracy: 0.5236 - auc_1: 0.5362 - val_loss: 0.6916 - val_accuracy: 0.5224 - val_auc_1: 0.5294\n","\n","Epoch 00045: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-45epoch.h5\n","Epoch 46/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6905 - accuracy: 0.5237 - auc_1: 0.5355 - val_loss: 0.6905 - val_accuracy: 0.5229 - val_auc_1: 0.5388\n","\n","Epoch 00046: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-46epoch.h5\n","Epoch 47/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6904 - accuracy: 0.5244 - auc_1: 0.5366 - val_loss: 0.6940 - val_accuracy: 0.5156 - val_auc_1: 0.5224\n","\n","Epoch 00047: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-47epoch.h5\n","Epoch 48/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6903 - accuracy: 0.5245 - auc_1: 0.5371 - val_loss: 0.7113 - val_accuracy: 0.5141 - val_auc_1: 0.5131\n","\n","Epoch 00048: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-48epoch.h5\n","Epoch 49/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6903 - accuracy: 0.5239 - auc_1: 0.5365 - val_loss: 0.6922 - val_accuracy: 0.5188 - val_auc_1: 0.5148\n","\n","Epoch 00049: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-49epoch.h5\n","Epoch 50/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6902 - accuracy: 0.5252 - auc_1: 0.5369 - val_loss: 0.6981 - val_accuracy: 0.5176 - val_auc_1: 0.5198\n","\n","Epoch 00050: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-50epoch.h5\n","Epoch 51/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6901 - accuracy: 0.5241 - auc_1: 0.5375 - val_loss: 0.6904 - val_accuracy: 0.5190 - val_auc_1: 0.5344\n","\n","Epoch 00051: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-51epoch.h5\n","Epoch 52/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6901 - accuracy: 0.5241 - auc_1: 0.5370 - val_loss: 0.6900 - val_accuracy: 0.5138 - val_auc_1: 0.5346\n","\n","Epoch 00052: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-52epoch.h5\n","Epoch 53/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6901 - accuracy: 0.5243 - auc_1: 0.5371 - val_loss: 0.6939 - val_accuracy: 0.5229 - val_auc_1: 0.5286\n","\n","Epoch 00053: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-53epoch.h5\n","Epoch 54/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6902 - accuracy: 0.5242 - auc_1: 0.5366 - val_loss: 0.6990 - val_accuracy: 0.5112 - val_auc_1: 0.5134\n","\n","Epoch 00054: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-54epoch.h5\n","Epoch 55/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6901 - accuracy: 0.5243 - auc_1: 0.5374 - val_loss: 0.6944 - val_accuracy: 0.5166 - val_auc_1: 0.5228\n","\n","Epoch 00055: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-55epoch.h5\n","Epoch 56/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6900 - accuracy: 0.5254 - auc_1: 0.5382 - val_loss: 0.7013 - val_accuracy: 0.5158 - val_auc_1: 0.5132\n","\n","Epoch 00056: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-56epoch.h5\n","Epoch 57/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6899 - accuracy: 0.5264 - auc_1: 0.5390 - val_loss: 0.6917 - val_accuracy: 0.5226 - val_auc_1: 0.5315\n","\n","Epoch 00057: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-57epoch.h5\n","Epoch 58/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6900 - accuracy: 0.5252 - auc_1: 0.5385 - val_loss: 0.6897 - val_accuracy: 0.5341 - val_auc_1: 0.5438\n","\n","Epoch 00058: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-58epoch.h5\n","Epoch 59/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6899 - accuracy: 0.5246 - auc_1: 0.5386 - val_loss: 0.6989 - val_accuracy: 0.5137 - val_auc_1: 0.5183\n","\n","Epoch 00059: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-59epoch.h5\n","Epoch 60/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6900 - accuracy: 0.5251 - auc_1: 0.5384 - val_loss: 0.6984 - val_accuracy: 0.5095 - val_auc_1: 0.5115\n","\n","Epoch 00060: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-60epoch.h5\n","Epoch 61/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6903 - accuracy: 0.5238 - auc_1: 0.5366 - val_loss: 0.6895 - val_accuracy: 0.5260 - val_auc_1: 0.5400\n","\n","Epoch 00061: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-61epoch.h5\n","Epoch 62/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6899 - accuracy: 0.5251 - auc_1: 0.5391 - val_loss: 0.6954 - val_accuracy: 0.5156 - val_auc_1: 0.5159\n","\n","Epoch 00062: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-62epoch.h5\n","Epoch 63/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6898 - accuracy: 0.5274 - auc_1: 0.5406 - val_loss: 0.7014 - val_accuracy: 0.5102 - val_auc_1: 0.5126\n","\n","Epoch 00063: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-63epoch.h5\n","Epoch 64/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6900 - accuracy: 0.5267 - auc_1: 0.5396 - val_loss: 0.6900 - val_accuracy: 0.5322 - val_auc_1: 0.5433\n","\n","Epoch 00064: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-64epoch.h5\n","Epoch 65/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6898 - accuracy: 0.5286 - auc_1: 0.5425 - val_loss: 0.7106 - val_accuracy: 0.5099 - val_auc_1: 0.5130\n","\n","Epoch 00065: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-65epoch.h5\n","Epoch 66/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6893 - accuracy: 0.5303 - auc_1: 0.5460 - val_loss: 0.6914 - val_accuracy: 0.5256 - val_auc_1: 0.5362\n","\n","Epoch 00066: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-66epoch.h5\n","Epoch 67/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6892 - accuracy: 0.5305 - auc_1: 0.5465 - val_loss: 0.6887 - val_accuracy: 0.5253 - val_auc_1: 0.5442\n","\n","Epoch 00067: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-67epoch.h5\n","Epoch 68/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6884 - accuracy: 0.5335 - auc_1: 0.5522 - val_loss: 0.6900 - val_accuracy: 0.5289 - val_auc_1: 0.5452\n","\n","Epoch 00068: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-68epoch.h5\n","Epoch 69/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6882 - accuracy: 0.5334 - auc_1: 0.5529 - val_loss: 0.6887 - val_accuracy: 0.5388 - val_auc_1: 0.5579\n","\n","Epoch 00069: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-69epoch.h5\n","Epoch 70/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6873 - accuracy: 0.5372 - auc_1: 0.5591 - val_loss: 0.6897 - val_accuracy: 0.5216 - val_auc_1: 0.5436\n","\n","Epoch 00070: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-70epoch.h5\n","Epoch 71/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6877 - accuracy: 0.5361 - auc_1: 0.5572 - val_loss: 0.6915 - val_accuracy: 0.5175 - val_auc_1: 0.5257\n","\n","Epoch 00071: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-71epoch.h5\n","Epoch 72/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6868 - accuracy: 0.5387 - auc_1: 0.5622 - val_loss: 0.7001 - val_accuracy: 0.5216 - val_auc_1: 0.5287\n","\n","Epoch 00072: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-72epoch.h5\n","Epoch 73/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6865 - accuracy: 0.5396 - auc_1: 0.5647 - val_loss: 0.6865 - val_accuracy: 0.5333 - val_auc_1: 0.5610\n","\n","Epoch 00073: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-73epoch.h5\n","Epoch 74/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6865 - accuracy: 0.5393 - auc_1: 0.5638 - val_loss: 0.6898 - val_accuracy: 0.5349 - val_auc_1: 0.5526\n","\n","Epoch 00074: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-74epoch.h5\n","Epoch 75/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6861 - accuracy: 0.5403 - auc_1: 0.5661 - val_loss: 0.6909 - val_accuracy: 0.5235 - val_auc_1: 0.5456\n","\n","Epoch 00075: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-75epoch.h5\n","Epoch 76/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6862 - accuracy: 0.5392 - auc_1: 0.5658 - val_loss: 0.6964 - val_accuracy: 0.5205 - val_auc_1: 0.5308\n","\n","Epoch 00076: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-76epoch.h5\n","Epoch 77/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6862 - accuracy: 0.5426 - auc_1: 0.5672 - val_loss: 0.7061 - val_accuracy: 0.5181 - val_auc_1: 0.5263\n","\n","Epoch 00077: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-77epoch.h5\n","Epoch 78/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6860 - accuracy: 0.5407 - auc_1: 0.5667 - val_loss: 0.6963 - val_accuracy: 0.5251 - val_auc_1: 0.5372\n","\n","Epoch 00078: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-78epoch.h5\n","Epoch 79/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6860 - accuracy: 0.5434 - auc_1: 0.5686 - val_loss: 0.6899 - val_accuracy: 0.5423 - val_auc_1: 0.5587\n","\n","Epoch 00079: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-79epoch.h5\n","Epoch 80/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6858 - accuracy: 0.5440 - auc_1: 0.5688 - val_loss: 0.6851 - val_accuracy: 0.5434 - val_auc_1: 0.5764\n","\n","Epoch 00080: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-80epoch.h5\n","Epoch 81/200\n","Learning rate:  0.001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6858 - accuracy: 0.5428 - auc_1: 0.5692 - val_loss: 0.6922 - val_accuracy: 0.5109 - val_auc_1: 0.5337\n","\n","Epoch 00081: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-81epoch.h5\n","Epoch 82/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6842 - accuracy: 0.5502 - auc_1: 0.5781 - val_loss: 0.6839 - val_accuracy: 0.5555 - val_auc_1: 0.5791\n","\n","Epoch 00082: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-82epoch.h5\n","Epoch 83/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6837 - accuracy: 0.5536 - auc_1: 0.5795 - val_loss: 0.6843 - val_accuracy: 0.5516 - val_auc_1: 0.5750\n","\n","Epoch 00083: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-83epoch.h5\n","Epoch 84/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6833 - accuracy: 0.5539 - auc_1: 0.5804 - val_loss: 0.6843 - val_accuracy: 0.5518 - val_auc_1: 0.5751\n","\n","Epoch 00084: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-84epoch.h5\n","Epoch 85/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6834 - accuracy: 0.5544 - auc_1: 0.5810 - val_loss: 0.6831 - val_accuracy: 0.5558 - val_auc_1: 0.5810\n","\n","Epoch 00085: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-85epoch.h5\n","Epoch 86/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6832 - accuracy: 0.5527 - auc_1: 0.5811 - val_loss: 0.6830 - val_accuracy: 0.5578 - val_auc_1: 0.5823\n","\n","Epoch 00086: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-86epoch.h5\n","Epoch 87/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6832 - accuracy: 0.5549 - auc_1: 0.5814 - val_loss: 0.6830 - val_accuracy: 0.5559 - val_auc_1: 0.5813\n","\n","Epoch 00087: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-87epoch.h5\n","Epoch 88/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6830 - accuracy: 0.5553 - auc_1: 0.5817 - val_loss: 0.6834 - val_accuracy: 0.5568 - val_auc_1: 0.5805\n","\n","Epoch 00088: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-88epoch.h5\n","Epoch 89/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6830 - accuracy: 0.5551 - auc_1: 0.5818 - val_loss: 0.6826 - val_accuracy: 0.5579 - val_auc_1: 0.5835\n","\n","Epoch 00089: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-89epoch.h5\n","Epoch 90/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6830 - accuracy: 0.5549 - auc_1: 0.5818 - val_loss: 0.6825 - val_accuracy: 0.5569 - val_auc_1: 0.5832\n","\n","Epoch 00090: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-90epoch.h5\n","Epoch 91/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6829 - accuracy: 0.5546 - auc_1: 0.5814 - val_loss: 0.6829 - val_accuracy: 0.5559 - val_auc_1: 0.5807\n","\n","Epoch 00091: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-91epoch.h5\n","Epoch 92/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6828 - accuracy: 0.5559 - auc_1: 0.5827 - val_loss: 0.6827 - val_accuracy: 0.5575 - val_auc_1: 0.5848\n","\n","Epoch 00092: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-92epoch.h5\n","Epoch 93/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6829 - accuracy: 0.5550 - auc_1: 0.5822 - val_loss: 0.6825 - val_accuracy: 0.5575 - val_auc_1: 0.5849\n","\n","Epoch 00093: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-93epoch.h5\n","Epoch 94/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6828 - accuracy: 0.5555 - auc_1: 0.5829 - val_loss: 0.6866 - val_accuracy: 0.5413 - val_auc_1: 0.5618\n","\n","Epoch 00094: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-94epoch.h5\n","Epoch 95/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6828 - accuracy: 0.5557 - auc_1: 0.5827 - val_loss: 0.6828 - val_accuracy: 0.5561 - val_auc_1: 0.5811\n","\n","Epoch 00095: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-95epoch.h5\n","Epoch 96/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6828 - accuracy: 0.5559 - auc_1: 0.5821 - val_loss: 0.6830 - val_accuracy: 0.5578 - val_auc_1: 0.5825\n","\n","Epoch 00096: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-96epoch.h5\n","Epoch 97/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6831 - accuracy: 0.5545 - auc_1: 0.5811 - val_loss: 0.6825 - val_accuracy: 0.5602 - val_auc_1: 0.5858\n","\n","Epoch 00097: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-97epoch.h5\n","Epoch 98/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6830 - accuracy: 0.5553 - auc_1: 0.5823 - val_loss: 0.6832 - val_accuracy: 0.5524 - val_auc_1: 0.5775\n","\n","Epoch 00098: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-98epoch.h5\n","Epoch 99/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6829 - accuracy: 0.5556 - auc_1: 0.5825 - val_loss: 0.6834 - val_accuracy: 0.5554 - val_auc_1: 0.5799\n","\n","Epoch 00099: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-99epoch.h5\n","Epoch 100/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6830 - accuracy: 0.5557 - auc_1: 0.5830 - val_loss: 0.6834 - val_accuracy: 0.5545 - val_auc_1: 0.5807\n","\n","Epoch 00100: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-100epoch.h5\n","Epoch 101/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6829 - accuracy: 0.5556 - auc_1: 0.5829 - val_loss: 0.6825 - val_accuracy: 0.5584 - val_auc_1: 0.5858\n","\n","Epoch 00101: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-101epoch.h5\n","Epoch 102/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6827 - accuracy: 0.5558 - auc_1: 0.5833 - val_loss: 0.6834 - val_accuracy: 0.5556 - val_auc_1: 0.5812\n","\n","Epoch 00102: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-102epoch.h5\n","Epoch 103/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6826 - accuracy: 0.5556 - auc_1: 0.5828 - val_loss: 0.6842 - val_accuracy: 0.5568 - val_auc_1: 0.5796\n","\n","Epoch 00103: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-103epoch.h5\n","Epoch 104/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6828 - accuracy: 0.5551 - auc_1: 0.5828 - val_loss: 0.6826 - val_accuracy: 0.5597 - val_auc_1: 0.5847\n","\n","Epoch 00104: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-104epoch.h5\n","Epoch 105/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6827 - accuracy: 0.5555 - auc_1: 0.5827 - val_loss: 0.6852 - val_accuracy: 0.5467 - val_auc_1: 0.5687\n","\n","Epoch 00105: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-105epoch.h5\n","Epoch 106/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6826 - accuracy: 0.5564 - auc_1: 0.5837 - val_loss: 0.6834 - val_accuracy: 0.5548 - val_auc_1: 0.5810\n","\n","Epoch 00106: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-106epoch.h5\n","Epoch 107/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6826 - accuracy: 0.5566 - auc_1: 0.5843 - val_loss: 0.6838 - val_accuracy: 0.5526 - val_auc_1: 0.5768\n","\n","Epoch 00107: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-107epoch.h5\n","Epoch 108/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6827 - accuracy: 0.5552 - auc_1: 0.5825 - val_loss: 0.6848 - val_accuracy: 0.5455 - val_auc_1: 0.5682\n","\n","Epoch 00108: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-108epoch.h5\n","Epoch 109/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6826 - accuracy: 0.5565 - auc_1: 0.5833 - val_loss: 0.6826 - val_accuracy: 0.5572 - val_auc_1: 0.5822\n","\n","Epoch 00109: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-109epoch.h5\n","Epoch 110/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6827 - accuracy: 0.5560 - auc_1: 0.5830 - val_loss: 0.6841 - val_accuracy: 0.5484 - val_auc_1: 0.5737\n","\n","Epoch 00110: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-110epoch.h5\n","Epoch 111/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6826 - accuracy: 0.5567 - auc_1: 0.5839 - val_loss: 0.6822 - val_accuracy: 0.5605 - val_auc_1: 0.5878\n","\n","Epoch 00111: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-111epoch.h5\n","Epoch 112/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6825 - accuracy: 0.5566 - auc_1: 0.5834 - val_loss: 0.6832 - val_accuracy: 0.5552 - val_auc_1: 0.5793\n","\n","Epoch 00112: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-112epoch.h5\n","Epoch 113/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6826 - accuracy: 0.5558 - auc_1: 0.5831 - val_loss: 0.6842 - val_accuracy: 0.5495 - val_auc_1: 0.5731\n","\n","Epoch 00113: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-113epoch.h5\n","Epoch 114/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6824 - accuracy: 0.5566 - auc_1: 0.5838 - val_loss: 0.6861 - val_accuracy: 0.5443 - val_auc_1: 0.5665\n","\n","Epoch 00114: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-114epoch.h5\n","Epoch 115/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6824 - accuracy: 0.5567 - auc_1: 0.5837 - val_loss: 0.6822 - val_accuracy: 0.5572 - val_auc_1: 0.5833\n","\n","Epoch 00115: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-115epoch.h5\n","Epoch 116/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6825 - accuracy: 0.5568 - auc_1: 0.5837 - val_loss: 0.6830 - val_accuracy: 0.5572 - val_auc_1: 0.5816\n","\n","Epoch 00116: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-116epoch.h5\n","Epoch 117/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6825 - accuracy: 0.5562 - auc_1: 0.5833 - val_loss: 0.6824 - val_accuracy: 0.5593 - val_auc_1: 0.5850\n","\n","Epoch 00117: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-117epoch.h5\n","Epoch 118/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6824 - accuracy: 0.5565 - auc_1: 0.5839 - val_loss: 0.6856 - val_accuracy: 0.5467 - val_auc_1: 0.5670\n","\n","Epoch 00118: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-118epoch.h5\n","Epoch 119/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6824 - accuracy: 0.5564 - auc_1: 0.5838 - val_loss: 0.6831 - val_accuracy: 0.5540 - val_auc_1: 0.5802\n","\n","Epoch 00119: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-119epoch.h5\n","Epoch 120/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6822 - accuracy: 0.5569 - auc_1: 0.5841 - val_loss: 0.6823 - val_accuracy: 0.5596 - val_auc_1: 0.5847\n","\n","Epoch 00120: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-120epoch.h5\n","Epoch 121/200\n","Learning rate:  0.0001\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6824 - accuracy: 0.5568 - auc_1: 0.5843 - val_loss: 0.6819 - val_accuracy: 0.5596 - val_auc_1: 0.5873\n","\n","Epoch 00121: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-121epoch.h5\n","Epoch 122/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6820 - accuracy: 0.5581 - auc_1: 0.5866 - val_loss: 0.6820 - val_accuracy: 0.5579 - val_auc_1: 0.5855\n","\n","Epoch 00122: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-122epoch.h5\n","Epoch 123/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6820 - accuracy: 0.5579 - auc_1: 0.5865 - val_loss: 0.6821 - val_accuracy: 0.5578 - val_auc_1: 0.5849\n","\n","Epoch 00123: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-123epoch.h5\n","Epoch 124/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6818 - accuracy: 0.5586 - auc_1: 0.5874 - val_loss: 0.6817 - val_accuracy: 0.5606 - val_auc_1: 0.5880\n","\n","Epoch 00124: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-124epoch.h5\n","Epoch 125/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6819 - accuracy: 0.5576 - auc_1: 0.5863 - val_loss: 0.6826 - val_accuracy: 0.5552 - val_auc_1: 0.5820\n","\n","Epoch 00125: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-125epoch.h5\n","Epoch 126/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6820 - accuracy: 0.5578 - auc_1: 0.5864 - val_loss: 0.6819 - val_accuracy: 0.5588 - val_auc_1: 0.5858\n","\n","Epoch 00126: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-126epoch.h5\n","Epoch 127/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6818 - accuracy: 0.5579 - auc_1: 0.5869 - val_loss: 0.6833 - val_accuracy: 0.5527 - val_auc_1: 0.5785\n","\n","Epoch 00127: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-127epoch.h5\n","Epoch 128/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6819 - accuracy: 0.5581 - auc_1: 0.5868 - val_loss: 0.6817 - val_accuracy: 0.5597 - val_auc_1: 0.5875\n","\n","Epoch 00128: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-128epoch.h5\n","Epoch 129/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6820 - accuracy: 0.5577 - auc_1: 0.5863 - val_loss: 0.6821 - val_accuracy: 0.5574 - val_auc_1: 0.5850\n","\n","Epoch 00129: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-129epoch.h5\n","Epoch 130/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6819 - accuracy: 0.5578 - auc_1: 0.5862 - val_loss: 0.6817 - val_accuracy: 0.5608 - val_auc_1: 0.5883\n","\n","Epoch 00130: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-130epoch.h5\n","Epoch 131/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6819 - accuracy: 0.5579 - auc_1: 0.5864 - val_loss: 0.6824 - val_accuracy: 0.5556 - val_auc_1: 0.5830\n","\n","Epoch 00131: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-131epoch.h5\n","Epoch 132/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6819 - accuracy: 0.5576 - auc_1: 0.5865 - val_loss: 0.6816 - val_accuracy: 0.5602 - val_auc_1: 0.5882\n","\n","Epoch 00132: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-132epoch.h5\n","Epoch 133/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6819 - accuracy: 0.5574 - auc_1: 0.5867 - val_loss: 0.6819 - val_accuracy: 0.5580 - val_auc_1: 0.5855\n","\n","Epoch 00133: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-133epoch.h5\n","Epoch 134/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6819 - accuracy: 0.5572 - auc_1: 0.5858 - val_loss: 0.6818 - val_accuracy: 0.5597 - val_auc_1: 0.5871\n","\n","Epoch 00134: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-134epoch.h5\n","Epoch 135/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6819 - accuracy: 0.5579 - auc_1: 0.5863 - val_loss: 0.6819 - val_accuracy: 0.5582 - val_auc_1: 0.5857\n","\n","Epoch 00135: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-135epoch.h5\n","Epoch 136/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6819 - accuracy: 0.5581 - auc_1: 0.5869 - val_loss: 0.6817 - val_accuracy: 0.5606 - val_auc_1: 0.5881\n","\n","Epoch 00136: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-136epoch.h5\n","Epoch 137/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6819 - accuracy: 0.5577 - auc_1: 0.5868 - val_loss: 0.6817 - val_accuracy: 0.5591 - val_auc_1: 0.5855\n","\n","Epoch 00137: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-137epoch.h5\n","Epoch 138/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6818 - accuracy: 0.5581 - auc_1: 0.5867 - val_loss: 0.6819 - val_accuracy: 0.5577 - val_auc_1: 0.5836\n","\n","Epoch 00138: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-138epoch.h5\n","Epoch 139/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6818 - accuracy: 0.5582 - auc_1: 0.5868 - val_loss: 0.6817 - val_accuracy: 0.5587 - val_auc_1: 0.5850\n","\n","Epoch 00139: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-139epoch.h5\n","Epoch 140/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6818 - accuracy: 0.5580 - auc_1: 0.5868 - val_loss: 0.6821 - val_accuracy: 0.5575 - val_auc_1: 0.5827\n","\n","Epoch 00140: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-140epoch.h5\n","Epoch 141/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6818 - accuracy: 0.5582 - auc_1: 0.5862 - val_loss: 0.6815 - val_accuracy: 0.5614 - val_auc_1: 0.5890\n","\n","Epoch 00141: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-141epoch.h5\n","Epoch 142/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6818 - accuracy: 0.5581 - auc_1: 0.5869 - val_loss: 0.6816 - val_accuracy: 0.5605 - val_auc_1: 0.5885\n","\n","Epoch 00142: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-142epoch.h5\n","Epoch 143/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6819 - accuracy: 0.5574 - auc_1: 0.5864 - val_loss: 0.6821 - val_accuracy: 0.5564 - val_auc_1: 0.5822\n","\n","Epoch 00143: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-143epoch.h5\n","Epoch 144/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6818 - accuracy: 0.5574 - auc_1: 0.5864 - val_loss: 0.6815 - val_accuracy: 0.5607 - val_auc_1: 0.5886\n","\n","Epoch 00144: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-144epoch.h5\n","Epoch 145/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6819 - accuracy: 0.5578 - auc_1: 0.5866 - val_loss: 0.6818 - val_accuracy: 0.5592 - val_auc_1: 0.5861\n","\n","Epoch 00145: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-145epoch.h5\n","Epoch 146/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6820 - accuracy: 0.5574 - auc_1: 0.5855 - val_loss: 0.6816 - val_accuracy: 0.5594 - val_auc_1: 0.5861\n","\n","Epoch 00146: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-146epoch.h5\n","Epoch 147/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6820 - accuracy: 0.5579 - auc_1: 0.5856 - val_loss: 0.6817 - val_accuracy: 0.5591 - val_auc_1: 0.5871\n","\n","Epoch 00147: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-147epoch.h5\n","Epoch 148/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6819 - accuracy: 0.5575 - auc_1: 0.5862 - val_loss: 0.6816 - val_accuracy: 0.5608 - val_auc_1: 0.5885\n","\n","Epoch 00148: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-148epoch.h5\n","Epoch 149/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6820 - accuracy: 0.5569 - auc_1: 0.5856 - val_loss: 0.6817 - val_accuracy: 0.5592 - val_auc_1: 0.5874\n","\n","Epoch 00149: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-149epoch.h5\n","Epoch 150/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6818 - accuracy: 0.5577 - auc_1: 0.5866 - val_loss: 0.6818 - val_accuracy: 0.5587 - val_auc_1: 0.5865\n","\n","Epoch 00150: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-150epoch.h5\n","Epoch 151/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6818 - accuracy: 0.5579 - auc_1: 0.5870 - val_loss: 0.6816 - val_accuracy: 0.5594 - val_auc_1: 0.5873\n","\n","Epoch 00151: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-151epoch.h5\n","Epoch 152/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6817 - accuracy: 0.5581 - auc_1: 0.5868 - val_loss: 0.6819 - val_accuracy: 0.5583 - val_auc_1: 0.5861\n","\n","Epoch 00152: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-152epoch.h5\n","Epoch 153/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6817 - accuracy: 0.5580 - auc_1: 0.5873 - val_loss: 0.6815 - val_accuracy: 0.5605 - val_auc_1: 0.5885\n","\n","Epoch 00153: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-153epoch.h5\n","Epoch 154/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6818 - accuracy: 0.5580 - auc_1: 0.5870 - val_loss: 0.6816 - val_accuracy: 0.5598 - val_auc_1: 0.5859\n","\n","Epoch 00154: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-154epoch.h5\n","Epoch 155/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6819 - accuracy: 0.5574 - auc_1: 0.5851 - val_loss: 0.6818 - val_accuracy: 0.5582 - val_auc_1: 0.5841\n","\n","Epoch 00155: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-155epoch.h5\n","Epoch 156/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6817 - accuracy: 0.5585 - auc_1: 0.5869 - val_loss: 0.6819 - val_accuracy: 0.5581 - val_auc_1: 0.5855\n","\n","Epoch 00156: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-156epoch.h5\n","Epoch 157/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6818 - accuracy: 0.5580 - auc_1: 0.5868 - val_loss: 0.6817 - val_accuracy: 0.5590 - val_auc_1: 0.5869\n","\n","Epoch 00157: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-157epoch.h5\n","Epoch 158/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6818 - accuracy: 0.5581 - auc_1: 0.5870 - val_loss: 0.6815 - val_accuracy: 0.5605 - val_auc_1: 0.5884\n","\n","Epoch 00158: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-158epoch.h5\n","Epoch 159/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6818 - accuracy: 0.5584 - auc_1: 0.5872 - val_loss: 0.6818 - val_accuracy: 0.5597 - val_auc_1: 0.5852\n","\n","Epoch 00159: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-159epoch.h5\n","Epoch 160/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6817 - accuracy: 0.5581 - auc_1: 0.5871 - val_loss: 0.6815 - val_accuracy: 0.5607 - val_auc_1: 0.5870\n","\n","Epoch 00160: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-160epoch.h5\n","Epoch 161/200\n","Learning rate:  1e-05\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6819 - accuracy: 0.5581 - auc_1: 0.5865 - val_loss: 0.6818 - val_accuracy: 0.5572 - val_auc_1: 0.5834\n","\n","Epoch 00161: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-161epoch.h5\n","Epoch 162/200\n","Learning rate:  1e-06\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6818 - accuracy: 0.5586 - auc_1: 0.5864 - val_loss: 0.6821 - val_accuracy: 0.5567 - val_auc_1: 0.5823\n","\n","Epoch 00162: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-162epoch.h5\n","Epoch 163/200\n","Learning rate:  1e-06\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6817 - accuracy: 0.5585 - auc_1: 0.5862 - val_loss: 0.6816 - val_accuracy: 0.5597 - val_auc_1: 0.5857\n","\n","Epoch 00163: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-163epoch.h5\n","Epoch 164/200\n","Learning rate:  1e-06\n","3308/3308 [==============================] - 79s 24ms/step - loss: 0.6817 - accuracy: 0.5581 - auc_1: 0.5860 - val_loss: 0.6816 - val_accuracy: 0.5595 - val_auc_1: 0.5858\n","\n","Epoch 00164: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-164epoch.h5\n","Epoch 165/200\n","Learning rate:  1e-06\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6817 - accuracy: 0.5581 - auc_1: 0.5863 - val_loss: 0.6815 - val_accuracy: 0.5609 - val_auc_1: 0.5875\n","\n","Epoch 00165: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-165epoch.h5\n","Epoch 166/200\n","Learning rate:  1e-06\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6819 - accuracy: 0.5578 - auc_1: 0.5856 - val_loss: 0.6817 - val_accuracy: 0.5589 - val_auc_1: 0.5853\n","\n","Epoch 00166: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-166epoch.h5\n","Epoch 167/200\n","Learning rate:  1e-06\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6818 - accuracy: 0.5582 - auc_1: 0.5858 - val_loss: 0.6816 - val_accuracy: 0.5588 - val_auc_1: 0.5853\n","\n","Epoch 00167: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-167epoch.h5\n","Epoch 168/200\n","Learning rate:  1e-06\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6817 - accuracy: 0.5586 - auc_1: 0.5862 - val_loss: 0.6816 - val_accuracy: 0.5593 - val_auc_1: 0.5857\n","\n","Epoch 00168: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-168epoch.h5\n","Epoch 169/200\n","Learning rate:  1e-06\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6819 - accuracy: 0.5581 - auc_1: 0.5857 - val_loss: 0.6816 - val_accuracy: 0.5597 - val_auc_1: 0.5859\n","\n","Epoch 00169: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-169epoch.h5\n","Epoch 170/200\n","Learning rate:  1e-06\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6818 - accuracy: 0.5582 - auc_1: 0.5860 - val_loss: 0.6815 - val_accuracy: 0.5597 - val_auc_1: 0.5861\n","\n","Epoch 00170: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-170epoch.h5\n","Epoch 171/200\n","Learning rate:  1e-06\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6818 - accuracy: 0.5579 - auc_1: 0.5857 - val_loss: 0.6816 - val_accuracy: 0.5595 - val_auc_1: 0.5856\n","\n","Epoch 00171: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-171epoch.h5\n","Epoch 172/200\n","Learning rate:  1e-06\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6818 - accuracy: 0.5581 - auc_1: 0.5858 - val_loss: 0.6816 - val_accuracy: 0.5594 - val_auc_1: 0.5858\n","\n","Epoch 00172: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-172epoch.h5\n","Epoch 173/200\n","Learning rate:  1e-06\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6817 - accuracy: 0.5583 - auc_1: 0.5862 - val_loss: 0.6816 - val_accuracy: 0.5597 - val_auc_1: 0.5855\n","\n","Epoch 00173: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-173epoch.h5\n","Epoch 174/200\n","Learning rate:  1e-06\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6817 - accuracy: 0.5584 - auc_1: 0.5859 - val_loss: 0.6816 - val_accuracy: 0.5591 - val_auc_1: 0.5853\n","\n","Epoch 00174: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-174epoch.h5\n","Epoch 175/200\n","Learning rate:  1e-06\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6818 - accuracy: 0.5577 - auc_1: 0.5856 - val_loss: 0.6816 - val_accuracy: 0.5591 - val_auc_1: 0.5854\n","\n","Epoch 00175: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-175epoch.h5\n","Epoch 176/200\n","Learning rate:  1e-06\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6818 - accuracy: 0.5588 - auc_1: 0.5860 - val_loss: 0.6817 - val_accuracy: 0.5584 - val_auc_1: 0.5847\n","\n","Epoch 00176: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-176epoch.h5\n","Epoch 177/200\n","Learning rate:  1e-06\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6819 - accuracy: 0.5582 - auc_1: 0.5857 - val_loss: 0.6817 - val_accuracy: 0.5582 - val_auc_1: 0.5846\n","\n","Epoch 00177: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-177epoch.h5\n","Epoch 178/200\n","Learning rate:  1e-06\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6817 - accuracy: 0.5579 - auc_1: 0.5859 - val_loss: 0.6819 - val_accuracy: 0.5572 - val_auc_1: 0.5834\n","\n","Epoch 00178: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-178epoch.h5\n","Epoch 179/200\n","Learning rate:  1e-06\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6817 - accuracy: 0.5583 - auc_1: 0.5861 - val_loss: 0.6816 - val_accuracy: 0.5593 - val_auc_1: 0.5859\n","\n","Epoch 00179: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-179epoch.h5\n","Epoch 180/200\n","Learning rate:  1e-06\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6817 - accuracy: 0.5580 - auc_1: 0.5862 - val_loss: 0.6816 - val_accuracy: 0.5592 - val_auc_1: 0.5857\n","\n","Epoch 00180: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-180epoch.h5\n","Epoch 181/200\n","Learning rate:  1e-06\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6817 - accuracy: 0.5582 - auc_1: 0.5861 - val_loss: 0.6816 - val_accuracy: 0.5595 - val_auc_1: 0.5858\n","\n","Epoch 00181: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-181epoch.h5\n","Epoch 182/200\n","Learning rate:  5e-07\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6818 - accuracy: 0.5585 - auc_1: 0.5861 - val_loss: 0.6815 - val_accuracy: 0.5601 - val_auc_1: 0.5864\n","\n","Epoch 00182: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-182epoch.h5\n","Epoch 183/200\n","Learning rate:  5e-07\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6817 - accuracy: 0.5584 - auc_1: 0.5864 - val_loss: 0.6816 - val_accuracy: 0.5598 - val_auc_1: 0.5860\n","\n","Epoch 00183: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-183epoch.h5\n","Epoch 184/200\n","Learning rate:  5e-07\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6818 - accuracy: 0.5580 - auc_1: 0.5860 - val_loss: 0.6817 - val_accuracy: 0.5585 - val_auc_1: 0.5851\n","\n","Epoch 00184: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-184epoch.h5\n","Epoch 185/200\n","Learning rate:  5e-07\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6817 - accuracy: 0.5580 - auc_1: 0.5857 - val_loss: 0.6820 - val_accuracy: 0.5573 - val_auc_1: 0.5831\n","\n","Epoch 00185: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-185epoch.h5\n","Epoch 186/200\n","Learning rate:  5e-07\n","3308/3308 [==============================] - 81s 24ms/step - loss: 0.6815 - accuracy: 0.5585 - auc_1: 0.5868 - val_loss: 0.6816 - val_accuracy: 0.5592 - val_auc_1: 0.5856\n","\n","Epoch 00186: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-186epoch.h5\n","Epoch 187/200\n","Learning rate:  5e-07\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6817 - accuracy: 0.5581 - auc_1: 0.5859 - val_loss: 0.6815 - val_accuracy: 0.5612 - val_auc_1: 0.5879\n","\n","Epoch 00187: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-187epoch.h5\n","Epoch 188/200\n","Learning rate:  5e-07\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6818 - accuracy: 0.5577 - auc_1: 0.5856 - val_loss: 0.6816 - val_accuracy: 0.5597 - val_auc_1: 0.5859\n","\n","Epoch 00188: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-188epoch.h5\n","Epoch 189/200\n","Learning rate:  5e-07\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6817 - accuracy: 0.5586 - auc_1: 0.5865 - val_loss: 0.6819 - val_accuracy: 0.5581 - val_auc_1: 0.5839\n","\n","Epoch 00189: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-189epoch.h5\n","Epoch 190/200\n","Learning rate:  5e-07\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6818 - accuracy: 0.5587 - auc_1: 0.5861 - val_loss: 0.6820 - val_accuracy: 0.5572 - val_auc_1: 0.5831\n","\n","Epoch 00190: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-190epoch.h5\n","Epoch 191/200\n","Learning rate:  5e-07\n","3308/3308 [==============================] - 81s 24ms/step - loss: 0.6817 - accuracy: 0.5580 - auc_1: 0.5861 - val_loss: 0.6816 - val_accuracy: 0.5591 - val_auc_1: 0.5856\n","\n","Epoch 00191: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-191epoch.h5\n","Epoch 192/200\n","Learning rate:  5e-07\n","3308/3308 [==============================] - 81s 25ms/step - loss: 0.6818 - accuracy: 0.5581 - auc_1: 0.5857 - val_loss: 0.6815 - val_accuracy: 0.5601 - val_auc_1: 0.5863\n","\n","Epoch 00192: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-192epoch.h5\n","Epoch 193/200\n","Learning rate:  5e-07\n","3308/3308 [==============================] - 81s 24ms/step - loss: 0.6817 - accuracy: 0.5580 - auc_1: 0.5860 - val_loss: 0.6815 - val_accuracy: 0.5600 - val_auc_1: 0.5866\n","\n","Epoch 00193: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-193epoch.h5\n","Epoch 194/200\n","Learning rate:  5e-07\n","3308/3308 [==============================] - 81s 24ms/step - loss: 0.6817 - accuracy: 0.5580 - auc_1: 0.5859 - val_loss: 0.6816 - val_accuracy: 0.5588 - val_auc_1: 0.5854\n","\n","Epoch 00194: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-194epoch.h5\n","Epoch 195/200\n","Learning rate:  5e-07\n","3308/3308 [==============================] - 81s 24ms/step - loss: 0.6818 - accuracy: 0.5575 - auc_1: 0.5856 - val_loss: 0.6816 - val_accuracy: 0.5595 - val_auc_1: 0.5861\n","\n","Epoch 00195: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-195epoch.h5\n","Epoch 196/200\n","Learning rate:  5e-07\n","3308/3308 [==============================] - 81s 25ms/step - loss: 0.6818 - accuracy: 0.5580 - auc_1: 0.5859 - val_loss: 0.6819 - val_accuracy: 0.5577 - val_auc_1: 0.5836\n","\n","Epoch 00196: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-196epoch.h5\n","Epoch 197/200\n","Learning rate:  5e-07\n","3308/3308 [==============================] - 81s 24ms/step - loss: 0.6818 - accuracy: 0.5585 - auc_1: 0.5861 - val_loss: 0.6816 - val_accuracy: 0.5588 - val_auc_1: 0.5851\n","\n","Epoch 00197: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-197epoch.h5\n","Epoch 198/200\n","Learning rate:  5e-07\n","3308/3308 [==============================] - 81s 24ms/step - loss: 0.6817 - accuracy: 0.5580 - auc_1: 0.5860 - val_loss: 0.6816 - val_accuracy: 0.5598 - val_auc_1: 0.5859\n","\n","Epoch 00198: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-198epoch.h5\n","Epoch 199/200\n","Learning rate:  5e-07\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6817 - accuracy: 0.5576 - auc_1: 0.5857 - val_loss: 0.6818 - val_accuracy: 0.5584 - val_auc_1: 0.5843\n","\n","Epoch 00199: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-199epoch.h5\n","Epoch 200/200\n","Learning rate:  5e-07\n","3308/3308 [==============================] - 80s 24ms/step - loss: 0.6817 - accuracy: 0.5580 - auc_1: 0.5860 - val_loss: 0.6815 - val_accuracy: 0.5609 - val_auc_1: 0.5873\n","\n","Epoch 00200: saving model to /content/drive/MyDrive/Projects/GSoC 2021/Model/ResNet-v2-withGC-200epoch.h5\n","Elapsed time: 4:25:24.03\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"SpndV2K_mp9g"},"source":["The trained neural network can now be evaluated."]},{"cell_type":"code","metadata":{"id":"Rcllz7JOmp9h","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1623270795700,"user_tz":-420,"elapsed":11107,"user":{"displayName":"Hiruka Shiro","photoUrl":"","userId":"01239836994690731741"}},"outputId":"42c0c062-106f-4601-bbc5-ca74de7f4802"},"source":["# Score trained model.\n","scores = model.evaluate(x_test, y_test, verbose=1)\n","print('Test loss:', scores[0])\n","print('Test accuracy:', scores[1])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2335/2335 [==============================] - 11s 5ms/step - loss: 0.5509 - accuracy: 0.7281 - auc: 0.7992\n","Test loss: 0.5509064793586731\n","Test accuracy: 0.7280722856521606\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"0kn-FYT9pqpY"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"XJF7yVRoJwba"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"HnI_bbisC4-Q"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"t6ZE3Qwy8BhJ"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rjhUkD1C1JuH"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wEODjDcIuR8N"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"cLyp7bQhnaXj"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"QbCQrBwK3VrY"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vO0OsbO0Szks"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"M2YGnI23ZrB5"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hBvH9IQsgiuQ"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"z8x9gL2g-NIa"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"YSz21c4spqsE"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"oeHrv8PApquu"},"source":[""],"execution_count":null,"outputs":[]}]}